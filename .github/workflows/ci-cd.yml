name: Deploy to GCP VM
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        
    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Verify authentication and configuration
      run: |
        echo "=== Current gcloud configuration ==="
        gcloud config list
        echo "=== Authenticated accounts ==="
        gcloud auth list
        echo "=== Testing authentication ==="
        gcloud projects describe ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Prepare deployment package
      run: |
        # Create a deployment directory
        mkdir -p deployment
        
        # Copy application files (adjust paths as needed)
        cp -r . deployment/
        
        # Remove unnecessary files
        rm -rf deployment/.git
        rm -rf deployment/.github
        rm -rf deployment/node_modules || true
        rm -rf deployment/.env* || true
        
        # Create deployment timestamp
        echo "DEPLOY_TIME=$(date -u +%Y%m%d_%H%M%S)" >> deployment/deploy_info.txt
        echo "COMMIT_SHA=${{ github.sha }}" >> deployment/deploy_info.txt
        echo "BRANCH=${{ github.ref_name }}" >> deployment/deploy_info.txt
        
    - name: Copy files to GCP VM
      run: |
        # Ensure VM is running
        echo "=== Checking VM status ==="
        VM_STATUS=$(gcloud compute instances describe ubuntu-4gb \
          --zone=us-central1-c \
          --format="value(status)")
        echo "VM Status: $VM_STATUS"
        
        if [ "$VM_STATUS" != "RUNNING" ]; then
          echo "Starting VM..."
          gcloud compute instances start ubuntu-4gb --zone=us-central1-c
          
          # Wait for VM to be ready
          echo "Waiting for VM to be ready..."
          sleep 30
        fi
        
        # Create target directory on VM
        gcloud compute ssh tanmaymi251@ubuntu-4gb \
          --zone=us-central1-c \
          --ssh-key-expire-after=1h \
          --command="mkdir -p ~/app/releases/$(date +%Y%m%d_%H%M%S)"
        
        # Copy deployment package
        echo "=== Copying files to VM ==="
        gcloud compute scp --recurse deployment/ \
          tanmaymi251@ubuntu-4gb:~/app/current \
          --zone=us-central1-c \
          --ssh-key-expire-after=1h
          
    - name: Run deployment script on VM
      run: |
        echo "=== Running deployment script ==="
        gcloud compute ssh tanmaymi251@ubuntu-4gb \
          --zone=us-central1-c \
          --ssh-key-expire-after=1h \
          --command="
            cd ~/app/current &&
            chmod +x deploy.sh &&
            ./deploy.sh
          "
          
    - name: Verify deployment
      run: |
        echo "=== Verifying deployment ==="
        gcloud compute ssh tanmaymi251@ubuntu-4gb \
          --zone=us-central1-c \
          --ssh-key-expire-after=1h \
          --command="
            cd ~/app/current &&
            if [ -f health_check.sh ]; then
              chmod +x health_check.sh &&
              ./health_check.sh
            else
              echo 'No health check script found, deployment completed'
            fi
          "
          
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "=== Deployment failed, running cleanup ==="
        gcloud compute ssh tanmaymi251@ubuntu-4gb \
          --zone=us-central1-c \
          --ssh-key-expire-after=1h \
          --command="
            if [ -d ~/app/previous ]; then
              echo 'Restoring previous version...'
              rm -rf ~/app/current
              mv ~/app/previous ~/app/current
              cd ~/app/current && ./start.sh || echo 'Failed to start previous version'
            fi
          " || echo "Cleanup failed or VM not accessible"